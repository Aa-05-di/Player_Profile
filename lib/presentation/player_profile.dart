import 'package:dio/dio.dart';
import 'package:dio_demo/core/desc_card.dart';
import 'package:dio_demo/core/pic.dart';
import 'package:dio_demo/core/video_card.dart';
import 'package:dio_demo/data/media_model.dart';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';

class PlayerProfile extends StatefulWidget {
  final int userId;
  final String? photo;
  final String? name;
  final String? rating;
  final String? skill;

  const PlayerProfile({
    super.key,
    required this.userId,
    this.photo,
    this.name,
    this.rating,
    this.skill,
  });

  @override
  _PlayerProfileState createState() => _PlayerProfileState();
}

class _PlayerProfileState extends State<PlayerProfile> {
  late Future<Autogenerated1> _futurePlayer;

  @override
  void initState() {
    super.initState();
    _futurePlayer = fetchPlayerData();
  }

  Future<Autogenerated1> fetchPlayerData() async {
    final dio = Dio();
    try {
      final response = await dio.get(
        'https://padel4all.calltekky.com/api/players-details?player_id=${widget.userId}',
        options: Options(headers: {"Accept": "application/json"}),
      );
      if (kDebugMode) {
        print("API Response Status: ${response.statusCode}");
        print("API Response Data: ${response.data}");
      }
      return Autogenerated1.fromJson(response.data);
    } catch (e) {
      if (kDebugMode) print("Error fetching player data: $e");
      return Autogenerated1();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          "Player info",
          style: TextStyle(fontWeight: FontWeight.w300),
        ),
        backgroundColor: Colors.transparent,
        centerTitle: true,
        elevation: 0,
      ),
      body: FutureBuilder<Autogenerated1>(
        future: _futurePlayer,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            if (kDebugMode) print("Waiting for data...");
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            if (kDebugMode) print("Error: ${snapshot.error}");
            return Center(child: Text('Error loading player data: ${snapshot.error}'));
          } else if (!snapshot.hasData) {
            if (kDebugMode) print("No data received");
            return Center(child: Text('No data available'));
          }

          final data = snapshot.data!;
          if (kDebugMode) print("Snapshot Data: $data, Player: ${data.player}");
          final player = data.player;
          if (player == null) {
            if (kDebugMode) print("Player is null");
            return Center(child: Text('No player data available'));
          }

          final videos = player.videos ?? [];
          if (kDebugMode) print("Videos: $videos");

          return SingleChildScrollView(
            child: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 70),
                  child: GestureDetector(
                    onTap: () {
                      if (widget.photo?.isNotEmpty ?? false) {
                        Navigator.push(
                          context,
                          MaterialPageRoute(builder: (_) => Pic(image: widget.photo!)),
                        );
                      } else {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text('No image available.')),
                        );
                      }
                    },
                    child: CircleAvatar(
                      radius: 120,
                      backgroundImage: widget.photo?.isNotEmpty ?? false ? NetworkImage(widget.photo!) : null,
                      onBackgroundImageError: (exception, stackTrace) {},
                      child: (widget.photo?.isEmpty ?? true)
                          ? const Icon(Icons.person, size: 100, color: Colors.grey)
                          : null,
                    ),
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  (widget.name ?? player.fullname ?? 'No Name').toUpperCase(),
                  style: const TextStyle(
                    color: Colors.black,
                    fontWeight: FontWeight.bold,
                    fontSize: 20,
                  ),
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 5.0),
                      child: Card(
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(20),
                          side: const BorderSide(color: Colors.green, width: 2.0),
                        ),
                        color: Colors.green[100],
                        elevation: 3,
                        child: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: DescCard(skill: widget.skill ?? player.skillLevel ?? 'N/A', rating: ''),
                        ),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 5.0),
                      child: Card(
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(20),
                          side: const BorderSide(color: Colors.green, width: 2.0),
                        ),
                        color: Colors.green[100],
                        elevation: 3,
                        child: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: DescCard(skill: '', rating: widget.rating ?? player.rating ?? 'N/A'),
                        ),
                      ),
                    ),
                  ],
                ),
                Align(
                  alignment: Alignment.centerLeft,
                  child: Padding(
                    padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 10),
                    child: Text(
                      "Recent Reviews",
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        fontFamily: "Pacifico",
                      ),
                    ),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(10.0),
                  child: VideoCard(videos: videos, playerId: widget.userId),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}