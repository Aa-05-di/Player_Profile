import 'package:dio_demo/data/player_model.dart';
import 'package:dio_demo/presentation/player_profile.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:dio/dio.dart';

class Intro extends StatefulWidget {
  const Intro({super.key});

  @override
  State<Intro> createState() => _IntroState();
}

class _IntroState extends State<Intro> {
  List<Player> posts = [];
  @override
  void initState() {
    super.initState();
    fetchPost();
  }

  void fetchPost() async {
    try {
      var response = await Dio().get(
        "https://padel4all.calltekky.com/api/players-list",
        options: Options(headers: {"Accept": "application/json"}),
      );
      if (kDebugMode) {
        print(response);
      }
      Autogenerated data = Autogenerated.fromJson(response.data);
      setState(() {
        posts = data.player != null
            ? List<Player>.from(data.player! as Iterable)
            : [];
      });
    } catch (e) {
      if (kDebugMode) {
        print("Error $e");
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: const Text(
          "Players List",
          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 25),
        ),
        centerTitle: true,
        backgroundColor: Colors.green[200],
      ),
      body: Padding(
        padding: const EdgeInsets.all(15.0),
        child: posts.isEmpty
            ? const Center(child: CircularProgressIndicator())
            : GridView.builder(
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2,
                  mainAxisExtent: 250,
                  mainAxisSpacing: 8,
                  crossAxisSpacing: 10,
                  childAspectRatio: 3 / 4,
                ),
                itemCount: posts.length,
                itemBuilder: (context, index) {
                  final player = posts[index];
                  return Card(
                    shadowColor: Colors.black,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                    elevation: 4,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: ClipRRect(
                            borderRadius: const BorderRadius.vertical(
                              top: Radius.circular(105),
                              bottom: Radius.circular(105),
                            ),
                            child: SizedBox(
                              height: 120,
                              width: 120,
                              child: Image.network(
                                player.playerImage ?? '',
                                fit: BoxFit.cover,
                                errorBuilder: (context, error, stackTrace) =>
                                    const Icon(Icons.error),
                              ),
                            ),
                          ),
                        ),
                        Text(
                          player.fullname?.toUpperCase() ?? "No Name",
                          style: const TextStyle(fontWeight: FontWeight.bold),
                        ),
                        Column(
                          children: [
                            Text(
                              "Skill Level: ${player.skillLevel ?? 'N/A'}",
                              style: const TextStyle(fontSize: 10),
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                const Icon(Icons.star, color: Colors.amber),
                                Text(
                                  double.tryParse(
                                        player.rating ?? '',
                                      )?.toStringAsFixed(1) ??
                                      "N/A",
                                ),
                              ],
                            ),
                            ElevatedButton(
                              onPressed: () {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (_) => PlayerProfile(photo: player.playerImage??"", name: player.fullname??"", rating: player.rating??"", skill: player.skillLevel??"", userId: player.userId??0,),
                                  ),
                                );
                              },
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.green,
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                                elevation: 3,
                                minimumSize: const Size(100, 30),
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 16,
                                  vertical: 6,
                                ),
                              ),
                              child: const Text(
                                "View Profile",
                                style: TextStyle(fontSize: 12),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  );
                },
              ),
      ),
    );
  }
}
